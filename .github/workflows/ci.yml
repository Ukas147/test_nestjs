name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job para verificar qualidade do código
  quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Executar lint
      run: npm run lint

    - name: Verificar formatação
      run: npm run format -- --check

    - name: Verificar tipos TypeScript
      run: npx tsc --noEmit

  # Job para testes
  test:
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Configurar banco de dados para testes
      run: |
        npx prisma generate
        npx prisma db push
      env:
        DATABASE_URL: "file:./test.db"

    - name: Executar testes unitários
      run: npm run test

    - name: Executar testes com coverage
      run: npm run test:cov

    - name: Executar testes e2e
      run: npm run test:e2e
      env:
        DATABASE_URL: "file:./test.db"

    - name: Upload coverage para Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job para build e validação
  build:
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Gerar cliente Prisma
      run: npx prisma generate
      env:
        DATABASE_URL: "file:./test.db"

    - name: Executar build
      run: npm run build

    - name: Verificar se build foi criado
      run: |
        ls -la dist/
        test -f dist/src/main.js

    - name: Verificar estrutura do build
      run: |
        echo "Verificando arquivos gerados:"
        ls -la dist/src/
        echo "Verificando se main.js existe:"
        test -f dist/src/main.js && echo "✅ main.js encontrado" || echo "❌ main.js não encontrado"
        echo "Verificando se módulos foram compilados:"
        test -d dist/src/modules && echo "✅ módulos compilados" || echo "❌ módulos não encontrados"
